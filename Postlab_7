/* 
 * File:   postlab7.c
 * Author: paola
 *
 * Created on 4 de abril de 2022, 16:15
 */


// PIC16F887 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#include <stdint.h>
#include "setup.h"

#define _XTAL_FREQ 4000000      //oscilador de 4MHz
#define BOTON_INC PORTBbits.RB0 //botón de incremento
#define BOTON_DEC PORTBbits.RB1 //botón de decremento
#define _valor_tmr0 50          //valor del tmr0

/*
 * DEECLARACION DE FUNCIONES
 */
void reset(void); // función de reset


/*
 * VARIABLES
 */
unsigned int uni, dec, cen; //variables para cada display
unsigned int cuenta=0;      //contador equivalente a leds
unsigned char display[]=
{
    0b00111111, //0
    0b00000110, //1
    0b01011011, //2
    0b01001111, //3
    0b01100110, //4
    0b01101101, //5
    0b01111101, //6
    0b00000111, //7
    0b01111111, //8
    0b01101111, //9
};


/*
 * INTERRUPCIONES
 */
void __interrupt() isr (void){
    
    if(INTCONbits.RBIF){        //si se deja de presionar RB0 incrementa PORTA
        if(!BOTON_INC){          //el valor cuenta también incrementa
            PORTA++;
            
        INTCONbits.RBIF = 0;
        }
        
        if(!BOTON_DEC){         //si se deja de presionar RB1 decrementa PORTA
            PORTA--;            //el valor de cuenta también decrementa
            
        INTCONbits.RBIF = 0;
        }
    }
    
    if (INTCONbits.T0IF){      
        reset();
        cuenta=PORTA;
        uni = ((cuenta/100)%10); //valor del contador lo divide en centenas
        dec = ((cuenta/10)%10);  //valor del contador lo divide en decenas
        cen = (cuenta%10);       //valor del contador en unidades
        INTCONbits.T0IF=0; //limpiamos la bandera
        
        
        
    }
    
    return;
}

/*
 *
 */
 void main(void) {
    setup();
    while(1){   
        PORTC = display[uni];
        PORTDbits.RD0 = 1;
        __delay_ms(10);
        PORTDbits.RD0 = 0;
        
        PORTC = display[dec];
        PORTDbits.RD1 = 1;
        __delay_ms(10);
        PORTDbits.RD1 = 0;
        
        PORTC = display[cen];
        PORTDbits.RD2 = 1;
        __delay_ms(10);
        PORTDbits.RD2 = 0;
        
        if (cuenta>=255) //limite de cuenta
        {
            cuenta = 0; 
        }
    }
    return;
}
 
void setup(void){
    ANSEL = 0;
    ANSELH = 0b00000000;
    
    TRISA = 0x00;
    PORTA = 0;
    
    TRISC = 0x00;              
    PORTC = 0;

    TRISD = 0x00;              
    PORTD = 0;
    
    //configuración para pull up
    TRISBbits.TRISB0 = 1;
    TRISBbits.TRISB1 = 1;
    OPTION_REGbits.nRBPU = 0;
    WPUBbits.WPUB0 = 1;
    WPUBbits.WPUB1 = 1;
    
    //configuración de interrupciones
    INTCONbits.GIE = 1;
    INTCONbits.RBIE = 1;
    INTCONbits.RBIF = 0;
    
    //configuración de INT ON CHANGE PORTB
    IOCBbits.IOCB0 = 1;
    IOCBbits.IOCB1 = 1;
    
    //configuración del tiempo
    OPTION_REGbits.T0CS = 0;
    OPTION_REGbits.PSA = 0;
    OPTION_REGbits.PS = 0b111;
    INTCONbits.T0IE = 1;
    INTCONbits.T0IF = 0;
    
    //configuración del oscilador
    OSCCONbits.IRCF2 = 1;   //4MHz 110
    OSCCONbits.IRCF1 = 1;   //4MHz 110
    OSCCONbits.IRCF0 = 0;   //4MHz 110
    OSCCONbits.SCS = 1;   //configuración de oscilador interno
}
 
 
 /*
  * FUNCIONES
  */
 
 void reset(void) {
    _valor_tmr0;
    INTCONbits.T0IF = 0;
    return;
}

